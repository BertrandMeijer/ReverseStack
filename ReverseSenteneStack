#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

// Struct Stack
struct Stack
{
    int top;
    char items[MAX];
};

// Fungsi untuk Menginisialisasi Stack
void initialization(struct Stack *stack)
{
    stack->top = -1;
}

// Fungsi untuk Memeriksa Apakah Stack Kosong
int isEmpty(struct Stack *stack)
{
    return stack->top == -1;
}

// Fungsi untuk Memeriksa Apakah Stack Penuh
int isFull(struct Stack *stack)
{
    return stack->top == MAX - 1;
}

// Fungsi untuk Menambahkan Element ke Stack
void push(struct Stack *stack, char item)
{
    if (isFull(stack))
    {
        printf("Stack penuh!\n");
        return;
    }
    stack->items[++stack->top] = item;
}

// Fungsi untuk Menghapus Elemen dari Stack
char pop(struct Stack *stack)
{
    if (isEmpty(stack))
    {
        printf("Stack kosong!\n");
        return '\0';
    }
    return stack->items[stack->top--];
}

// Fungsi untuk Membalik Kalimat Menggunakan Stack
void reverseSentence(char sentence[])
{
    int n = strlen(sentence);
    struct Stack stack;
    initialization(&stack);

    // Memasukkan Semua Karakter Kalimat ke Dalam Stack
    for (int i = 0; i < n; i++)
    {
        push(&stack, sentence[i]);
    }

    // Mengeluarkan Semua Karakter dari Stack dan Memasukkannya Kembali ke Kalimat
    for (int i = 0; i < n; i++)
    {
        sentence[i] = pop(&stack);
    }
}

int main()
{
    char sentence[MAX];

    printf("Masukkan Kalimat: ");
    fgets(sentence, MAX, stdin);

    // Jika ada karakter newLine, maka dihapus
    sentence[strcspn(sentence, "\n")] = 0;

    reverseSentence(sentence);

    printf("Kalimat Setelah Dibalik: %s\n", sentence);

    return 0;
}
